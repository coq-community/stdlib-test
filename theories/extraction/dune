; generated by dev/tools/gen-dune.sh
(rule (target ExtrHaskellBasic.v) (deps All/ExtrHaskellBasic.v) (action (run mv %{deps} %{target})))
(rule (target ExtrHaskellNatInt.v) (deps All/ExtrHaskellNatInt.v) (action (run mv %{deps} %{target})))
(rule (target ExtrHaskellNatInteger.v) (deps All/ExtrHaskellNatInteger.v) (action (run mv %{deps} %{target})))
(rule (target ExtrHaskellNatNum.v) (deps All/ExtrHaskellNatNum.v) (action (run mv %{deps} %{target})))
(rule (target ExtrHaskellString.v) (deps All/ExtrHaskellString.v) (action (run mv %{deps} %{target})))
(rule (target ExtrHaskellZInt.v) (deps All/ExtrHaskellZInt.v) (action (run mv %{deps} %{target})))
(rule (target ExtrHaskellZInteger.v) (deps All/ExtrHaskellZInteger.v) (action (run mv %{deps} %{target})))
(rule (target ExtrHaskellZNum.v) (deps All/ExtrHaskellZNum.v) (action (run mv %{deps} %{target})))
(rule (target ExtrOCamlFloats.v) (deps All/ExtrOCamlFloats.v) (action (run mv %{deps} %{target})))
(rule (target ExtrOCamlInt63.v) (deps All/ExtrOCamlInt63.v) (action (run mv %{deps} %{target})))
(rule (target ExtrOCamlPArray.v) (deps All/ExtrOCamlPArray.v) (action (run mv %{deps} %{target})))
(rule (target ExtrOCamlPString.v) (deps All/ExtrOCamlPString.v) (action (run mv %{deps} %{target})))
(rule (target ExtrOcamlBasic.v) (deps All/ExtrOcamlBasic.v) (action (run mv %{deps} %{target})))
(rule (target ExtrOcamlChar.v) (deps All/ExtrOcamlChar.v) (action (run mv %{deps} %{target})))
(rule (target ExtrOcamlIntConv.v) (deps All/ExtrOcamlIntConv.v) (action (run mv %{deps} %{target})))
(rule (target ExtrOcamlNatBigInt.v) (deps All/ExtrOcamlNatBigInt.v) (action (run mv %{deps} %{target})))
(rule (target ExtrOcamlNatInt.v) (deps All/ExtrOcamlNatInt.v) (action (run mv %{deps} %{target})))
(rule (target ExtrOcamlNativeString.v) (deps All/ExtrOcamlNativeString.v) (action (run mv %{deps} %{target})))
(rule (target ExtrOcamlString.v) (deps All/ExtrOcamlString.v) (action (run mv %{deps} %{target})))
(rule (target ExtrOcamlZBigInt.v) (deps All/ExtrOcamlZBigInt.v) (action (run mv %{deps} %{target})))
(rule (target ExtrOcamlZInt.v) (deps All/ExtrOcamlZInt.v) (action (run mv %{deps} %{target})))
(rule (target Extraction.v) (deps Base/Extraction.v) (action (run mv %{deps} %{target})))

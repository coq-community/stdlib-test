# this has been mostly automatically generated by dev/tools/make-depends.sh
digraph stdlib_deps {
	node [color=lightblue,
		shape=ellipse,
		style=filled
	];
        "coq-stdlib" -> "coq-stdlib-compat";
        "coq-stdlib-compat" -> "coq-stdlib-fmaps-fsets-msets";
        "coq-stdlib-compat" -> "coq-stdlib-wellfounded";
        "coq-stdlib-compat" -> "coq-stdlib-derive";
        "coq-stdlib-compat" -> "coq-stdlib-rtauto";
        "coq-stdlib-compat" -> "coq-stdlib-extraction";
        "coq-stdlib-compat" -> "coq-stdlib-reals";
        "coq-stdlib-compat" -> "coq-stdlib-streams";
        "coq-stdlib-compat" -> "coq-stdlib-funind";
	"coq-stdlib-arith" -> "coq-stdlib-ring";
	"coq-stdlib-ring" -> "coq-stdlib-zarith-base";
	"coq-stdlib-ring" -> "coq-stdlib-list";
	"coq-stdlib-arith-base" -> "coq-stdlib-structures";
	"coq-stdlib-classes" -> "coq-stdlib-program";
	"coq-stdlib-classes" -> "coq-stdlib-relations";
	"coq-stdlib-structures" -> "coq-stdlib-bool";
	"coq-stdlib-bool" -> "coq-stdlib-classes";
	"coq-stdlib-program" -> "coq-stdlib-logic";
	"coq-stdlib-classical-logic" -> "coq-stdlib-arith";
	"coq-stdlib-lia" -> "coq-stdlib-arith";
	"coq-stdlib-extraction" -> "coq-stdlib-extraction-base";
	"coq-stdlib-extraction" -> "coq-stdlib-primitive-array";
	"coq-stdlib-extraction" -> "coq-stdlib-primitive-floats";
	"coq-stdlib-extraction" -> "coq-stdlib-primitive-string";
	"coq-stdlib-primitive-array" -> "coq-stdlib-primitive-int";
	"coq-stdlib-primitive-floats" -> "coq-stdlib-primitive-int";
	"coq-stdlib-primitive-int" -> "coq-stdlib-zarith";
	"coq-stdlib-primitive-int" -> "coq-stdlib-unicode";
	"coq-stdlib-string" -> "coq-stdlib-arith";
	"coq-stdlib-zarith" -> "coq-stdlib-lia";
	"coq-stdlib-field" -> "coq-stdlib-zarith";
	"coq-stdlib-field" -> "coq-stdlib-qarith-base";
	"coq-stdlib-qarith-base" -> "coq-stdlib-ring";
	"coq-stdlib-zarith-base" -> "coq-stdlib-narith";
	"coq-stdlib-fmaps-fsets-msets" -> "coq-stdlib-zarith";
	"coq-stdlib-fmaps-fsets-msets" -> "coq-stdlib-orders-ex";
	"coq-stdlib-orders-ex" -> "coq-stdlib-string";
	"coq-stdlib-orders-ex" -> "coq-stdlib-sorting";
	"coq-stdlib-sets" -> "coq-stdlib-classical-logic";
	"coq-stdlib-sorting" -> "coq-stdlib-lia";
	"coq-stdlib-sorting" -> "coq-stdlib-sets";
	"coq-stdlib-sorting" -> "coq-stdlib-vectors";
	"coq-stdlib-funind" -> "coq-stdlib-arith-base";
	"coq-stdlib-funind" -> "coq-stdlib-extraction-base";
	"coq-stdlib-list" -> "coq-stdlib-arith-base";
	"coq-stdlib-narith" -> "coq-stdlib-positive";
	"coq-stdlib-lqa" -> "coq-stdlib-field";
	"coq-stdlib-positive" -> "coq-stdlib-arith-base";
	"coq-stdlib-nsatz" -> "coq-stdlib-zarith";
	"coq-stdlib-nsatz" -> "coq-stdlib-qarith-base";
	"coq-stdlib-primitive-string" -> "coq-stdlib-primitive-int";
	"coq-stdlib-primitive-string" -> "coq-stdlib-orders-ex";
	"coq-stdlib-qarith" -> "coq-stdlib-field";
	"coq-stdlib-reals" -> "coq-stdlib-classical-logic";
	"coq-stdlib-reals" -> "coq-stdlib-lqa";
	"coq-stdlib-reals" -> "coq-stdlib-nsatz";
	"coq-stdlib-reals" -> "coq-stdlib-qarith";
	"coq-stdlib-reals" -> "coq-stdlib-vectors";
	"coq-stdlib-vectors" -> "coq-stdlib-list";
	"coq-stdlib-rtauto" -> "coq-stdlib-list";
	"coq-stdlib-rtauto" -> "coq-stdlib-positive";
	"coq-stdlib-streams" -> "coq-stdlib-logic";
	"coq-stdlib-wellfounded" -> "coq-stdlib-list";
}
